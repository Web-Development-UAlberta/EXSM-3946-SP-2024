// <auto-generated />
using System;
using DotNetAPIDemo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetAPIDemo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DotNetAPIDemo.Models.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Author")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("author");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("PostID")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int?>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ID");

                    b.HasIndex("PostID")
                        .HasDatabaseName("IX_Comment_Post");

                    b.HasIndex("UserID");

                    b.ToTable("comment");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            Author = "John Doe",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(8880),
                            PostID = -1,
                            Text = "Wow I didn't think a post could be so cool."
                        },
                        new
                        {
                            ID = -2,
                            Author = "Jane Doe",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(8883),
                            PostID = -1,
                            Text = "I agree with John, this post is cool."
                        },
                        new
                        {
                            ID = -3,
                            Author = "John Doe",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(8884),
                            PostID = -2,
                            Text = "Wow I didn't think a post could be so hot."
                        },
                        new
                        {
                            ID = -4,
                            Author = "Jane Doe",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(8885),
                            PostID = -2,
                            Text = "I agree with John, this post is hot."
                        },
                        new
                        {
                            ID = -5,
                            Author = "John Doe",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(8885),
                            PostID = -3,
                            Text = "Wow I didn't think a post could be so cold."
                        },
                        new
                        {
                            ID = -6,
                            Author = "Jane Doe",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(8886),
                            PostID = -3,
                            Text = "I agree with John, this post is cold."
                        },
                        new
                        {
                            ID = -7,
                            Author = "John Doe",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(8887),
                            PostID = -4,
                            Text = "Wow I didn't think a post could be so warm."
                        },
                        new
                        {
                            ID = -8,
                            Author = "Jane Doe",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(8888),
                            PostID = -4,
                            Text = "I agree with John, this post is warm."
                        },
                        new
                        {
                            ID = -9,
                            Author = "John Doe",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(8888),
                            PostID = -5,
                            Text = "Wow I didn't think a post could be so dry."
                        },
                        new
                        {
                            ID = -10,
                            Author = "Jane Doe",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(8889),
                            PostID = -5,
                            Text = "I agree with John, this post is dry."
                        });
                });

            modelBuilder.Entity("DotNetAPIDemo.Models.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("ID");

                    b.ToTable("post");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            Content = "This is a cool post.",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(7765),
                            Title = "A Cool Post"
                        },
                        new
                        {
                            ID = -2,
                            Content = "This is a hot post.",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(7770),
                            Title = "A Hot Post"
                        },
                        new
                        {
                            ID = -3,
                            Content = "This is a cold post.",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(7771),
                            Title = "A Cold Post"
                        },
                        new
                        {
                            ID = -4,
                            Content = "This is a warm post.",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(7771),
                            Title = "A Warm Post"
                        },
                        new
                        {
                            ID = -5,
                            Content = "This is a dry post.",
                            CreatedAt = new DateTime(2024, 7, 16, 1, 25, 55, 891, DateTimeKind.Utc).AddTicks(7772),
                            Title = "A Dry Post"
                        });
                });

            modelBuilder.Entity("DotNetAPIDemo.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.HasKey("ID");

                    b.ToTable("app_user");
                });

            modelBuilder.Entity("DotNetAPIDemo.Models.Comment", b =>
                {
                    b.HasOne("DotNetAPIDemo.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Post");

                    b.HasOne("DotNetAPIDemo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DotNetAPIDemo.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
